#!python
import os
import sys

conan = SConscript('build/SConscript_conan')
if not conan:
    print("File `SConscript_conan` is missing.")
    print("It should be generated by running `mkdir -p build && cd build && conan install ..`.")
    sys.exit(1)

conanflags = conan["conan"]

target = ARGUMENTS.get("target", "debug")
platform = ARGUMENTS.get("platform", "windows")
bits = ARGUMENTS.get("bits", 64)

final_lib_path = 'project/bin/'

# This makes sure to keep the session environment variables on windows, 
# that way you can run scons in a vs 2017 prompt and it will find all the required tools
env = Environment()
if platform == "windows":
    env = Environment(ENV = os.environ)

def add_sources(sources, directory):
    for filename in os.listdir(directory):
        filepath = os.path.join(directory, filename)
        if os.path.isfile(filepath):
            if filepath.endswith('.cpp'):
                sources.append(filepath)
        elif os.path.isdir(filepath):
            add_sources(sources, filepath)

if platform == "osx":
    env.Append(CCFLAGS = ['-g','-O3', '-arch', 'x86_64', '-std=c++14'])
    env.Append(LINKFLAGS = ['-arch', 'x86_64'])

    final_lib_path = final_lib_path + 'osx/'

elif platform == "linux":
    env.Append(CCFLAGS = ['-fPIC', '-g','-O3', '-std=c++14'])

    final_lib_path = final_lib_path + 'x11/'

elif platform == "windows":
    if target == "debug":
        env.Append(CCFLAGS = ['-EHsc', '-D_DEBUG', '-MDd'])
    else:
        env.Append(CCFLAGS = ['-O2', '-EHsc', '-DNDEBUG', '-MD'])

    final_lib_path = final_lib_path + 'win' + str(bits) + '/'

env.Append(CPPPATH=['.', 'src/', "godot_headers/", 'godot-cpp/include/', 'godot-cpp/include/core/'])
env.Append(LIBPATH="godot-cpp/bin")
env.Append(LIBS=["godot-cpp" + "." + platform + "." + str(bits)])

sources1 = []
add_sources(sources1, "src")
sources2 = []
for filename in sources1:
    sources2.append('build/scons/' + filename.split('src')[1])

env.MergeFlags(conanflags)
env.VariantDir('build/scons', 'src', duplicate=0)
library = env.SharedLibrary(target=final_lib_path + 'libgdclient', source=sources2)
Default(library)
